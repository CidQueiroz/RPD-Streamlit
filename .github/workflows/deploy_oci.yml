# Nome do nosso robô (workflow)
name: Tentar Criar Instância OCI

# Gatilhos: Quando o robô deve acordar e trabalhar
on:
  # 1. De hora em hora, automaticamente
  schedule:
    - cron: '0 * * * *' # A sintaxe 'cron' para "no minuto 0, de toda hora"
  
  # 2. Permite que você o acione manualmente pela interface do GitHub
  workflow_dispatch:

# Tarefas: O que o robô deve fazer
jobs:
  deploy:
    # O tipo de computador que o robô usará (um Ubuntu)
    runs-on: ubuntu-latest

    # AQUI ESTÁ A CORREÇÃO: Define o diretório de trabalho padrão para todos os passos deste job
    defaults:
      run:
        working-directory: Terraform_OCI

    steps:
      # Passo 1: O robô pega uma cópia das suas "plantas baixas" (o código do repo)
      - name: Checkout do código
        uses: actions/checkout@v4

      # Passo 2: O robô pega a "caixa de ferramentas" do Terraform
      - name: Setup do Terraform
        uses: hashicorp/setup-terraform@v3

      # Passo 3: O robô executa os comandos do Terraform
      - name: Executar Terraform
        env:
          OCI_TENANCY_OCID: ${{ secrets.OCI_TENANCY_OCID }}
          OCI_USER_OCID: ${{ secrets.OCI_USER_OCID }}
          OCI_PRIVATE_KEY: ${{ secrets.OCI_PRIVATE_KEY }}
          OCI_FINGERPRINT: ${{ secrets.OCI_FINGERPRINT }}
          OCI_REGION: sa-saopaulo-1
        
        run: |
          # Decodifica a chave privada a partir do segredo e a salva em um arquivo temporário
          echo "${{ secrets.OCI_PRIVATE_KEY }}" | base64 --decode > oci_api_key_temp.pem

          # Exporta o CAMINHO para o arquivo da chave. O provedor do Terraform usará esta variável.
          export OCI_PRIVATE_KEY_PATH=$(pwd)/oci_api_key_temp.pem

          # Roda os comandos
          terraform init
          terraform apply -auto-approve
